diff -burN '--exclude=.git' binutils-2.20.1/bfd/elf.c binutils-2.20.1-PS3/bfd/elf.c
--- binutils-2.20.1/bfd/elf.c	2009-09-10 08:47:12.000000000 -0300
+++ binutils-2.20.1-PS3/bfd/elf.c	2011-05-25 10:15:20.410050911 -0300
@@ -973,7 +973,9 @@
       phdr = elf_tdata (abfd)->phdr;
       for (i = 0; i < elf_elfheader (abfd)->e_phnum; i++, phdr++)
 	{
-	  if (phdr->p_type == PT_LOAD
+	  if (((phdr->p_type == PT_LOAD
+		&& (hdr->sh_flags & SHF_TLS) == 0)
+	       || phdr->p_type == PT_TLS)
 	      && ELF_IS_SECTION_IN_SEGMENT (hdr, phdr))
 	    {
 	      if ((flags & SEC_LOAD) == 0)
@@ -3826,8 +3828,12 @@
 	  phdr_in_segment = FALSE;
 	}
 
-      /* Create a final PT_LOAD program segment.  */
-      if (last_hdr != NULL)
+      /* Create a final PT_LOAD program segment, but not if it's just
+	 for .tbss.  */
+      if (last_hdr != NULL
+	  && (i - phdr_index != 1
+	      || ((last_hdr->flags & (SEC_THREAD_LOCAL | SEC_LOAD))
+		  != SEC_THREAD_LOCAL)))
 	{
 	  m = make_mapping (abfd, sections, phdr_index, i, phdr_in_segment);
 	  if (m == NULL)
@@ -4531,7 +4537,8 @@
 	    sec = *secpp;
 	    this_hdr = &(elf_section_data(sec)->this_hdr);
 	    if (this_hdr->sh_size != 0
-		&& !ELF_IS_SECTION_IN_SEGMENT_FILE (this_hdr, p))
+		&& !ELF_IS_SECTION_IN_SEGMENT_FILE (this_hdr, p)
+		&& !ELF_TBSS_SPECIAL (this_hdr, p))
 	      {
 		(*_bfd_error_handler)
 		  (_("%B: section `%A' can't be allocated in segment %d"),
@@ -4704,17 +4711,21 @@
 	      && (p->p_type != PT_NOTE
 		  || bfd_get_format (abfd) != bfd_core))
 	    {
-	      Elf_Internal_Shdr *hdr;
-	      asection *sect;
-
 	      BFD_ASSERT (!m->includes_filehdr && !m->includes_phdrs);
 
-	      sect = m->sections[m->count - 1];
-	      hdr = &elf_section_data (sect)->this_hdr;
-	      p->p_filesz = sect->filepos - m->sections[0]->filepos;
-	      if (hdr->sh_type != SHT_NOBITS)
-		p->p_filesz += hdr->sh_size;
+	      p->p_filesz = 0;
 	      p->p_offset = m->sections[0]->filepos;
+	      for (i = m->count; i-- != 0;)
+		{
+		  asection *sect = m->sections[i];
+		  Elf_Internal_Shdr *hdr = &elf_section_data (sect)->this_hdr;
+		  if (hdr->sh_type != SHT_NOBITS)
+		    {
+		      p->p_filesz = (sect->filepos - m->sections[0]->filepos
+				     + hdr->sh_size);
+		      break;
+		    }
+		}
 	    }
 	}
       else if (m->includes_filehdr)
diff -burN '--exclude=.git' binutils-2.20.1/include/elf/internal.h binutils-2.20.1-PS3/include/elf/internal.h
--- binutils-2.20.1/include/elf/internal.h	2008-11-14 10:44:09.000000000 -0400
+++ binutils-2.20.1-PS3/include/elf/internal.h	2011-05-25 10:15:21.160050910 -0300
@@ -292,10 +292,13 @@
 
 /* .tbss is special.  It doesn't contribute memory space to normal
    segments and it doesn't take file space in normal segments.  */
+#define ELF_TBSS_SPECIAL(sec_hdr, segment)			\
+  (((sec_hdr)->sh_flags & SHF_TLS) != 0				\
+   && (sec_hdr)->sh_type == SHT_NOBITS				\
+   && (segment)->p_type != PT_TLS)
+
 #define ELF_SECTION_SIZE(sec_hdr, segment)			\
-   (((sec_hdr->sh_flags & SHF_TLS) == 0				\
-     || sec_hdr->sh_type != SHT_NOBITS				\
-     || segment->p_type == PT_TLS) ? sec_hdr->sh_size : 0)
+  (ELF_TBSS_SPECIAL(sec_hdr, segment) ? 0 : (sec_hdr)->sh_size)
 
 /* Decide if the given sec_hdr is in the given segment.  PT_TLS segment
    contains only SHF_TLS sections.  Only PT_LOAD, PT_GNU_RELRO and
diff -burN '--exclude=.git' binutils-2.20.1/ld/emultempl/spuelf.em binutils-2.20.1-PS3/ld/emultempl/spuelf.em
--- binutils-2.20.1/ld/emultempl/spuelf.em	2009-08-10 04:50:56.000000000 -0300
+++ binutils-2.20.1-PS3/ld/emultempl/spuelf.em	2011-05-25 10:15:21.220050910 -0300
@@ -355,7 +355,7 @@
   *fname = mktemp (*fname);
   if (*fname == NULL)
     return -1;
-  fd = open (fname, O_RDWR | O_CREAT | O_EXCL, 0600);
+  fd = open (*fname, O_RDWR | O_CREAT | O_EXCL, 0600);
 #endif
   return fd;
 }
@@ -396,7 +396,11 @@
   argv[my_argc++] = "-T";
   argv[my_argc++] = auto_overlay_file;
   argv[my_argc] = 0;
+#if defined(_WIN32)
+  execvp (argv[0], (const char* const*) argv);
+#else
   execvp (argv[0], (char *const *) argv);
+#endif
   perror (argv[0]);
   _exit (127);
 }
